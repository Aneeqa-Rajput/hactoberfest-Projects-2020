#include <bits/stdc++.h>
  using namespace std;
  int ans=0;
  class Graph
  {
    int nodes;
    list<int> *adj;
    public:
    Graph(int n)
    {
      nodes=n;
      adj=new list<int>[nodes];
    }
    void edge(int u,int v)
    {
      adj[u].push_back(v);
      adj[v].push_back(u);
    }
    void DFS(int v,bool visited[],int landmine[],int l,int c)
    {
      visited[v]=true;
      if(v==0&&landmine[v])
      c=c+1;
      list<int>::iterator i;
      if(c>l)
      return;
      if(adj[v].size()==1&&c<=l&&visited[*(adj[v].begin())])
      {
        ans++;
        if(landmine[v])
        c=c-1;
      }
      for(i=adj[v].begin();i!=adj[v].end();i++)
      {
        
        if(!visited[*i]&&landmine[*i])
        {
          list<int>:: iterator j;
        int flag=0;
          for(j=adj[*i].begin();j!=adj[*i].end();j++)
          {
            if(landmine[*j])
            {
              flag=1;
              DFS(*i,visited,landmine,l,c+1);
              break;
            }
        }
        if(flag==0)
        DFS(*i,visited,landmine,l,c);
      }
      else if(!visited[*i]&&landmine[*i]==0)
      DFS(*i,visited,landmine,l,0);
    }
    }
  };
  int main()
  {
    int n,l;
    cin>>n>>l;
    int* landmine=new int[n];
    Graph g(n);
    for(int i=0;i<n;i++)
    cin>>landmine[i];
    for(int i=0;i<n-1;i++)
    {
      int u,v;
      cin>>u>>v;
      g.edge(u,v);
    }
    bool* visited= new bool[n];
    for(int i=0;i<n;i++)
    visited[i]=false;
    g.DFS(0,visited,landmine,l,0);
    cout<<ans<<endl;
    
   
    
    return 0;
  }
